---
import type { Form as Props } from '~/types';
import Button from '~/components/ui/Button.astro';
import { sendEmail } from '~/utils/sendEmail';

const { inputs, textarea, disclaimer, button = 'Contact us', description = '' } = Astro.props;

async function handleSubmit(event: Event) {
  event.preventDefault();

  // Collecte les données du formulaire
  const formData = new FormData(event.target as HTMLFormElement);
  const data = {
    name: formData.get('name')?.toString() || '',
    email: formData.get('email')?.toString() || '',
    message: formData.get('message')?.toString() || '',
  };

  // Appelle la fonction sendEmail
  const response = await sendEmail(data);

  // Gère la réponse
  if (response.success) {
    const confirmationMessage = document.createElement('div');
    confirmationMessage.className = 'text-center space-y-4';
    confirmationMessage.innerHTML = `
      <h2 class="text-2xl font-bold">Merci pour votre message !</h2>
      <p>Nous avons bien reçu votre demande et nous vous répondrons dans les plus brefs délais.</p>
    `;
    (event.target as HTMLElement).replaceWith(confirmationMessage);
  } else {
    alert('Une erreur est survenue. Veuillez réessayer.');
  }
}
---

<form method="POST" onsubmit={handleSubmit} class="space-y-6">
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div>
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name={textarea.name ? textarea.name : 'message'}
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900"
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600 dark:text-gray-400">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }

  <input type="hidden" id="g-recaptcha-response" name="g-recaptcha-response" />

  {
    button && (
      <div class="mt-10 grid">
        <Button variant="primary" type="submit">
          {button}
        </Button>
      </div>
    )
  }

  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600 dark:text-gray-400">{description}</p>
      </div>
    )
  }
</form>
